<?php

/**
 * @file
 * Integrates Drupal with Gredi DAM.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\entity\BundleFieldDefinition;
use Drupal\helfi_gredi_image\Service\AssetMetadataHelper;
use Drupal\file\Entity\File;
use Drupal\Core\Entity\EntityInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\media\MediaTypeInterface;
use Drupal\helfi_gredi_image\Plugin\media\Source\GredidamAsset;

/**
 * Implements hook_theme().
 */
function media_gredidam_theme($existing, $type, $theme, $path) {
  return [
    'checkboxes__gredidam_assets' => [
      'render element' => 'element',
      'template' => 'checkboxes--gredidam-assets',
    ],
  ];
}

/**
 * Implements hook_entity_field_storage_info().
 */
function helfi_gredi_image_entity_field_storage_info(EntityTypeInterface $entity_type): array {
  $definitions = [];
  if ($entity_type->id() === 'media') {
    $definitions['gredi_asset_id'] = BundleFieldDefinition::create('string')
      ->setName('gredi_asset_id')
      ->setLabel('Gredi Asset ID')
      ->setTranslatable(FALSE)
      ->setRevisionable(FALSE)
      ->setTargetEntityTypeId('media')
      ->setDisplayConfigurable('view', FALSE)
      ->setDisplayConfigurable('form', FALSE);

    $definitions['gredi_modified'] = BundleFieldDefinition::create('timestamp')
      ->setName('gredi_modified')
      ->setLabel(new TranslatableMarkup('Gredi Asset Modified'))
      ->setTranslatable(FALSE)
      ->setRevisionable(FALSE)
      ->setTargetEntityTypeId('media')
      ->setDisplayConfigurable('view', FALSE)
      ->setDisplayConfigurable('form', FALSE);
  }
  return $definitions;
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function helfi_gredi_image_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  $definitions = [];
  if ($entity_type->id() === 'media') {
    $media_type_storage = Drupal::entityTypeManager()->getStorage('media_type');
    $media_type = $media_type_storage->load($bundle);
    if (!$media_type instanceof MediaTypeInterface) {
      return $definitions;
    }
    if ($media_type->getSource() instanceof GredidamAsset) {
      $definitions['gredi_asset_id'] = BundleFieldDefinition::create('string')
        ->setName('gredi_asset_id')
        ->setLabel(new TranslatableMarkup('Gredi Asset ID'))
        ->setTranslatable(FALSE)
        ->setRevisionable(FALSE);

      $definitions['gredi_modified'] = BundleFieldDefinition::create('timestamp')
        ->setName('gredi_modified')
        ->setLabel(new TranslatableMarkup('Gredi Asset Modified'))
        ->setTranslatable(FALSE)
        ->setRevisionable(FALSE);
    }
  }
  return $definitions;
}


/**
 * Implements hook_cron().
 */
function helfi_gredi_image_cron()
{
  /** @var int $last_run */
  $last_run = \Drupal::state()->get('helfi_gredi_image.last_run', 0);
  /** @var int $request_time */
  $request_time = \Drupal::time()->getRequestTime();
  // If 60 minutes passed since last time.
  if (($request_time - $last_run) > 60 * 60 * 24) {
    /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
    $config_factory = \Drupal::service('config.factory');
    /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
    $date_formatter = \Drupal::service('date.formatter');
    /** @var \Drupal\helfi_gredi_image\Service\GrediDamClient $gradi_dam_client */
    $gradi_dam_client = \Drupal::service('helfi_gredi_image.dam_client');
    /** @var \Drupal\helfi_gredi_image\Service\AssetMetadataHelper $metadata_helper */
    $metadata_helper = new AssetMetadataHelper($config_factory, $date_formatter, $gradi_dam_client);
    $metadata_helper->populateMetadataUpdateQueue();
    \Drupal::state()->set('helfi_gredi_image.last_run', $request_time);
  }
}

/**
 * Implements hook_form_id_alter().
 */
function helfi_gredi_image_form_media_gredi_dam_assets_edit_form_alter(&$form, FormStateInterface $form_state) {
  $form['field_external_id']['widget'][0]['#attributes'] = [
    'readonly' => 'readonly',
    'disabled' => 'disabled',
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function helfi_gredi_image_form_user_form_alter(&$form, FormStateInterface $form_state) {
  $form['field_gredi_dam_password']['widget'][0]['value']['#type'] = 'password';
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function helfi_gredi_image_media_delete(EntityInterface $entity) {
  // Delete media from public folder when a media is deleted from interface.
  /** @var \Drupal\media\MediaInterface $entity */
  $source = $entity->getSource();
  if ($source instanceof GredidamAsset) {
    $field_name = $source->getConfiguration()['source_field'];
    if ($entity->hasField($field_name)
      && $file = $entity->get($field_name)->entity) {
      $file->delete();
    }
  }
}
