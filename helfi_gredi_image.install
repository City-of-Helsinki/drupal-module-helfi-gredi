<?php

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * @file
 * Installation related hooks and functions.
 */


function helfi_gredi_image_install() {

  // Creating fields for meta.
  FieldStorageConfig::create([
    'field_name' => 'field_external_id',
    'entity_type' => 'media',
    'type' => 'text',
  ])->save();
  FieldConfig::create([
    'field_name' => 'field_external_id',
    'entity_type' => 'media',
    'bundle' => 'gredi_dam_assets',
    'label' => 'External Id',
  ])->save();

  FieldStorageConfig::create([
    'field_name' => 'field_keywords',
    'entity_type' => 'media',
    'type' => 'text',
  ])->save();
  FieldConfig::create([
    'field_name' => 'field_keywords',
    'entity_type' => 'media',
    'bundle' => 'gredi_dam_assets',
    'label' => 'Keywords',
  ])->save();

  FieldStorageConfig::create([
    'field_name' => 'field_created',
    'entity_type' => 'media',
    'type' => 'text',
  ])->save();
  FieldConfig::create([
    'field_name' => 'field_created',
    'entity_type' => 'media',
    'bundle' => 'gredi_dam_assets',
    'label' => 'Created',
  ])->save();

  FieldStorageConfig::create([
    'field_name' => 'field_alt_text',
    'entity_type' => 'media',
    'type' => 'text',
  ])->save();
  FieldConfig::create([
    'field_name' => 'field_alt_text',
    'entity_type' => 'media',
    'bundle' => 'gredi_dam_assets',
    'label' => 'Alt text',
  ])->save();

}
/**
 * Implements hook_schema().
 */
function helfi_gredi_image_schema() {
  $schema = [];
  $schema['gredidam_assets_data'] = [
    'description' => 'Gredi DAM asset information.',
    'fields' => [
      'asset_id' => [
        'description' => 'The asset ID.',
        'default' => '',
        'type' => 'varchar_ascii',
        'not null' => TRUE,
        'length' => 128,
      ],
      'name' => [
        'description' => 'The identifier of the data.',
        'type' => 'varchar_ascii',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ],
      'value' => [
        'description' => 'The value.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
      ],
      'serialized' => [
        'description' => 'Whether value is serialized.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'default' => 0,
      ],
    ],
    'primary key' => ['asset_id', 'name'],
    'indexes' => [
      'asset_id' => ['asset_id'],
      'name' => ['name'],
    ],
  ];

  return $schema;
}

/**
 * Installs the new asset data schema if necessary.
 */
function helfi_gredi_image_update_8101(&$sandbox) {

  $table_name = 'gredidam_assets_data';

  $db_schema = Drupal::database()->schema();
  if ($db_schema->tableExists($table_name)) {
    return;
  }

  $new_schema = helfi_gredi_image_schema();
  $db_schema->createTable($table_name, $new_schema[$table_name]);
}

/**
 * Implements hook_uninstall().
 */
function helfi_gredi_image_uninstall($is_syncing) {
  FieldStorageConfig::load('media.field_external_id')->delete();
  FieldStorageConfig::load('media.field_alt_text')->delete();
  FieldStorageConfig::load('media.field_keywords')->delete();
  FieldStorageConfig::load('media.field_created')->delete();
  FieldStorageConfig::load('media.field_external_id_image')->delete();

}
